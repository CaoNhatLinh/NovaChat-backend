package com.chatapp.chat_service.message.repository;

import org.springframework.data.cassandra.repository.CassandraRepository;
import org.springframework.data.cassandra.repository.Query;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;

import com.chatapp.chat_service.message.entity.Message;

import java.time.Instant;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Repository
public interface MessageRepository extends CassandraRepository<Message, Message.MessageKey> {

    // ðŸ”¥ Query Ä‘á»ƒ láº¥y tin nháº¯n má»›i nháº¥t vá»›i LIMIT trá»±c tiáº¿p (khÃ´ng dÃ¹ng Pageable vÃ¬ custom @Query khÃ´ng há»— trá»£ tá»‘t)
    @Query("SELECT * FROM messages_by_conversation WHERE conversation_id = ?0 ORDER BY message_id DESC LIMIT ?1")
    List<Message> findByConversationIdWithLimit(UUID conversationId, int limit);

    // ðŸ”¥ Derived query method (khÃ´ng cÃ³ @Query) - Spring Data sáº½ tá»± Ä‘á»™ng táº¡o query vÃ  há»— trá»£ Pageable
    List<Message> findByKeyConversationIdOrderByKeyMessageIdDesc(UUID conversationId, Pageable pageable);

    // ðŸ”¥ Query Ä‘á»ƒ láº¥y tin nháº¯n cÅ© hÆ¡n má»™t message_id nháº¥t Ä‘á»‹nh (sá»­ dá»¥ng TIMEUUID comparison)
    @Query("SELECT * FROM messages_by_conversation WHERE conversation_id = ?0 AND message_id < ?1 ORDER BY message_id DESC LIMIT 30")
    List<Message> findOlderMessages(UUID conversationId, UUID beforeMessageId);

    @Query("SELECT * FROM messages_by_conversation WHERE conversation_id = ?0 AND message_id = ?1")
    Optional<Message> findByConversationIdAndMessageId(UUID conversationId, UUID messageId);

    @Query("SELECT * FROM messages_by_conversation WHERE conversation_id = ?0 AND created_at < ?1 ALLOW FILTERING")
    List<Message> findByConversationIdAndTimestampBefore(UUID conversationId, Instant before, Pageable pageable);

    @Query("SELECT * FROM messages_by_conversation WHERE conversation_id = ?0 AND created_at > ?1 ALLOW FILTERING")
    List<Message> findByConversationIdAndTimestampAfter(UUID conversationId, Instant after, Pageable pageable);

    @Query("SELECT * FROM messages_by_conversation WHERE conversation_id = ?0 AND created_at > ?1 AND created_at < ?2 ALLOW FILTERING")
    List<Message> findByConversationIdAndTimestampBetween(UUID conversationId, Instant after, Instant before, Pageable pageable);
}