package com.chatapp.chat_service.presence.service;

import com.chatapp.chat_service.kafka.KafkaEventProducer;
import com.chatapp.chat_service.presence.dto.UserPresenceResponse;
import com.chatapp.chat_service.presence.entity.UserPresence;
import com.chatapp.chat_service.presence.event.OnlineStatusEvent;
import com.chatapp.chat_service.presence.repository.UserPresenceRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.core.RedisCallback;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.time.Instant;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class PresenceService {

    private final RedisTemplate<String, String> redisTemplate;
    private final KafkaEventProducer kafkaEventProducer;
    private final UserPresenceRepository userPresenceRepository; // ƒê·ªÉ check privacy

    // ----------------------------------------------------------------
    // üîë C√ÅC KEY REDIS ƒê∆Ø·ª¢C THI·∫æT K·∫æ L·∫†I
    // ----------------------------------------------------------------
    
    // Set<SessionID> - L∆∞u c√°c session ƒëang online c·ªßa 1 user
    // D√πng ƒë·ªÉ check N+1 Pipelining
    private static final String USER_SESSIONS_KEY = "presence:sessions:%s"; // (UUID: userId)
    
    // String - Key "nh·ªãp tim" (heartbeat) cho 1 session c·ª• th·ªÉ.
    // Key n√†y s·∫Ω T·ª∞ H·ª¶Y (expire) sau 60s.
    private static final String SESSION_HEARTBEAT_KEY = "presence:hb:%s:%s"; // (UUID: userId, String: sessionId)
    
    // Set<UUID> - L∆∞u danh s√°ch user ID m√† T√îI (subscriber) ƒëang theo d√µi
    private static final String MY_SUBSCRIPTIONS_KEY = "presence:subs:%s"; // (UUID: subscriberId)
    
    // Set<UUID> - L∆∞u danh s√°ch user ID ƒëang theo d√µi T√îI (watchers)
    private static final String MY_WATCHERS_KEY = "presence:watchers:%s"; // (UUID: targetUserId)

    // ----------------------------------------------------------------
    // 1. QU·∫¢N L√ù ONLINE/OFFLINE (HEARTBEAT)
    // ----------------------------------------------------------------

    /**
     * Ki·ªÉm tra user c√≥ online kh√¥ng
     */
    public boolean isUserOnline(UUID userId) {
        String sessionsKey = String.format(USER_SESSIONS_KEY, userId);
        Long sessionCount = redisTemplate.opsForSet().size(sessionsKey);
        return sessionCount != null && sessionCount > 0;
    }
    public void setUserOnlineStatus(UUID userId, boolean isOnline) {
        // L∆∞u tr·∫°ng th√°i online/offline v√†o CSDL n·∫øu c·∫ßn
        Optional<UserPresence> presenceOpt = userPresenceRepository.findById(userId);
        UserPresence presence = presenceOpt.orElseGet(() -> UserPresence.builder()
                .userId(userId)
                .build());
        presence.setOnline(isOnline);
        if (!isOnline) {
            presence.setLastActive(Instant.now());
        }
        userPresenceRepository.save(presence);
    }
    public Set<String> getOnlineUsers() {
        // L·∫•y t·∫•t c·∫£ userId ƒëang online t·ª´ Redis
        // C√°ch ƒë∆°n gi·∫£n l√† qu√©t t·∫•t c·∫£ key "presence:sessions:*" v√† l·∫•y nh·ªØng key c√≥ sessionCount > 0
        Set<String> onlineUserIds = new HashSet<>();
        Set<String> keys = redisTemplate.keys("presence:sessions:*");
        if (keys != null) {
            for (String key : keys) {
                Long sessionCount = redisTemplate.opsForSet().size(key);
                if (sessionCount != null && sessionCount > 0) {
                    String userIdStr = key.substring("presence:sessions:".length());
                    onlineUserIds.add(userIdStr);
                }
            }
        }
        return onlineUserIds;
    }
    /**
     * ƒê∆∞·ª£c g·ªçi M·ªòT L·∫¶N khi client k·∫øt n·ªëi WebSocket (v√≠ d·ª•: t·ª´ WebSocketConnectHandler).
     */


    public void handleConnection(UUID userId, String sessionId) {
        log.info("User {} connected with session {}", userId, sessionId);
        String sessionsKey = String.format(USER_SESSIONS_KEY, userId);
        
        // Th√™m session v√†o Set. `isFirstSession` = true n·∫øu ƒë√¢y l√† session ƒë·∫ßu ti√™n
        boolean isFirstSession = redisTemplate.opsForSet().add(sessionsKey, sessionId) == 1;

        if (isFirstSession) {
            // L√† session ƒë·∫ßu ti√™n -> G·ª≠i event "ONLINE"
            log.info("User {} is now ONLINE (first session)", userId);
            sendOnlineStatusEvent(userId, true);
        }
        
        // Lu√¥n ƒë·∫∑t nh·ªãp tim ƒë·∫ßu ti√™n
        handleHeartbeat(userId, sessionId);
    }

    /**
     * ƒê∆∞·ª£c g·ªçi M·ªñI 30 GI√ÇY t·ª´ client (Frontend).
     * ƒê√¢y l√† "nh·ªãp tim" (ping) ƒë·ªÉ gi·ªØ cho session c√≤n s·ªëng.
     */
    public void handleHeartbeat(UUID userId, String sessionId) {
        log.debug("Heartbeat received for user {}, session {}", userId, sessionId);
        String heartbeatKey = String.format(SESSION_HEARTBEAT_KEY, userId, sessionId);
        
        // Gia h·∫°n key th√™m 60 gi√¢y. N·∫øu client ng·ª´ng ping, key n√†y s·∫Ω h·∫øt h·∫°n.
        redisTemplate.opsForValue().set(heartbeatKey, "1", Duration.ofSeconds(60));
    }

    /**
     * ƒê∆∞·ª£c g·ªçi khi key "presence:hb:..." H·∫æT H·∫†N (t·ª´ RedisKeyExpirationListener).
     * ƒê√¢y l√† logic x·ª≠ l√Ω "ng·∫Øt k·∫øt n·ªëi b·∫©n".
     */
    public void handleExpiredSession(UUID userId, String sessionId) {
        log.warn("Heartbeat expired for user {}, session {}", userId, sessionId);
        String sessionsKey = String.format(USER_SESSIONS_KEY, userId);

        // X√≥a session kh·ªèi Set. `isLastSession` = true n·∫øu kh√¥ng c√≤n session n√†o
        Long remainingSessions = redisTemplate.opsForSet().remove(sessionsKey, sessionId);
        
        if (remainingSessions != null && remainingSessions == 0) {
            // L√† session cu·ªëi c√πng -> G·ª≠i event "OFFLINE"
            log.warn("User {} is now OFFLINE (last session expired)", userId);
            sendOnlineStatusEvent(userId, false);
        }
    }
    
    /**
     * ƒê∆∞·ª£c g·ªçi ƒë·ªãnh k·ª≥ (v√≠ d·ª•: m·ªói 5 ph√∫t) ƒë·ªÉ l√†m m·ªõi c√°c session v·∫´n c√≤n ho·∫°t ƒë·ªông.
     * N·∫øu session kh√¥ng c√≤n ho·∫°t ƒë·ªông, n√≥ s·∫Ω b·ªã lo·∫°i b·ªè.
     */

     public void refreshUserSession(UUID userId, String sessionId) {
        log.debug("Refreshing session for user {}, session {}", userId, sessionId);
        String sessionsKey = String.format(USER_SESSIONS_KEY, userId);
        
        // Ki·ªÉm tra xem session c√≥ t·ªìn t·∫°i kh√¥ng
        Boolean isMember = redisTemplate.opsForSet().isMember(sessionsKey, sessionId);
        if (Boolean.TRUE.equals(isMember)) {
            // Gia h·∫°n nh·ªãp tim
            handleHeartbeat(userId, sessionId);
        } else {
            log.warn("Session {} for user {} not found during refresh", sessionId, userId);
        }
    }
    /**
     * ƒê∆∞·ª£c g·ªçi khi user b·∫•m "Logout" (ng·∫Øt k·∫øt n·ªëi s·∫°ch).
     */
    public void handleLogout(UUID userId, String sessionId) {
        log.info("User {} clean logout from session {}", userId, sessionId);
        String heartbeatKey = String.format(SESSION_HEARTBEAT_KEY, userId, sessionId);
        String sessionsKey = String.format(USER_SESSIONS_KEY, userId);

        // 1. Ch·ªß ƒë·ªông x√≥a key heartbeat
        redisTemplate.delete(heartbeatKey); 
        
        // 2. X√≥a session
        Long remainingSessions = redisTemplate.opsForSet().remove(sessionsKey, sessionId);
        
        if (remainingSessions != null && remainingSessions == 0) {
            // L√† session cu·ªëi c√πng -> G·ª≠i event "OFFLINE"
            log.info("User {} is now OFFLINE (clean logout)", userId);
            sendOnlineStatusEvent(userId, false);
        }
    }

    private void sendOnlineStatusEvent(UUID userId, boolean isOnline) {
        OnlineStatusEvent event = OnlineStatusEvent.builder()
                .userId(userId)
                .online(isOnline)
                .timestamp(Instant.now())
                .build();
        kafkaEventProducer.sendOnlineStatusEvent(event);
    }

    // ----------------------------------------------------------------
    // 2. QU·∫¢N L√ù THEO D√ïI (SUBSCRIPTION) - C√ì SYNC
    // ----------------------------------------------------------------

    /**
     * ƒê·ªìng b·ªô h√≥a (Sync) danh s√°ch theo d√µi.
     * ƒê∆∞·ª£c g·ªçi khi user online v√† g·ª≠i danh s√°ch b·∫°n b√®/chung ph√≤ng.
     */
    public void syncSubscriptions(UUID subscriberId, List<UUID> targetUserIds) {
        String mySubsKey = String.format(MY_SUBSCRIPTIONS_KEY, subscriberId);
        Set<String> currentSubIdsStr = redisTemplate.opsForSet().members(mySubsKey);
        if (currentSubIdsStr == null) currentSubIdsStr = Collections.emptySet();
        
        Set<String> newSubIdsStr = targetUserIds.stream()
                .map(UUID::toString)
                .collect(Collectors.toSet());

        Set<String> toAdd = new HashSet<>(newSubIdsStr);
        toAdd.removeAll(currentSubIdsStr); // L·∫•y nh·ªØng ID m·ªõi

        Set<String> toRemove = new HashSet<>(currentSubIdsStr);
        toRemove.removeAll(newSubIdsStr); // L·∫•y nh·ªØng ID c≈© (ƒë√£ h·ªßy k·∫øt b·∫°n)

        // D√πng Pipelining ƒë·ªÉ ch·∫°y 2 h√†m Unsub v√† Sub
        redisTemplate.executePipelined((RedisConnection connection) -> {
            
            // D·ªçn d·∫πp 1: H·ªßy theo d√µi 100 ng∆∞·ªùi ƒë√£ h·ªßy k·∫øt b·∫°n
            if (!toRemove.isEmpty()) {
                log.debug("User {} unsubscribing from {} users", subscriberId, toRemove.size());
                for (String targetIdStr : toRemove) {
                    // X√≥a T√îI kh·ªèi danh s√°ch watcher c·ªßa H·ªå
                    String theirWatchersKey = String.format(MY_WATCHERS_KEY, targetIdStr);
                    connection.sRem(theirWatchersKey.getBytes(), subscriberId.toString().getBytes());
                }
                // X√≥a H·ªå kh·ªèi danh s√°ch T√îI theo d√µi
                connection.sRem(mySubsKey.getBytes(), toRemove.toArray(new byte[0][0]));
            }

            // Th√™m 2: Theo d√µi nh·ªØng ng∆∞·ªùi m·ªõi
            if (!toAdd.isEmpty()) {
                 log.debug("User {} subscribing to {} new users", subscriberId, toAdd.size());
                for (String targetIdStr : toAdd) {
                    // Th√™m T√îI v√†o danh s√°ch watcher c·ªßa H·ªå
                    String theirWatchersKey = String.format(MY_WATCHERS_KEY, targetIdStr);
                    connection.sAdd(theirWatchersKey.getBytes(), subscriberId.toString().getBytes());
                }
                // Th√™m H·ªå v√†o danh s√°ch T√îI theo d√µi
                connection.sAdd(mySubsKey.getBytes(), toAdd.toArray(new byte[0][0]));
            }
            
            // Lu√¥n gia h·∫°n key ch√≠nh (24 gi·ªù)
            connection.expire(mySubsKey.getBytes(), Duration.ofHours(24).toSeconds());
            return null;
        });
    }

    /**
     * L·∫•y danh s√°ch ID c·ªßa nh·ªØng ng∆∞·ªùi ƒëang theo d√µi T√îI.
     */
    public Set<UUID> getWatchers(UUID userId) {
        String watchersKey = String.format(MY_WATCHERS_KEY, userId);
        Set<String> watcherIdsStr = redisTemplate.opsForSet().members(watchersKey);
        
        if (watcherIdsStr == null) return Collections.emptySet();
        
        return watcherIdsStr.stream()
                .map(UUID::fromString)
                .collect(Collectors.toSet());
    }

    // ----------------------------------------------------------------
    // 3. L·∫§Y TR·∫†NG TH√ÅI (PULL) - T·ªêI ∆ØU PIPELINE
    // ----------------------------------------------------------------

    /**
     * L·∫•y tr·∫°ng th√°i c·ªßa NHI·ªÄU user (v√≠ d·ª•: 200 ng∆∞·ªùi) trong 1 truy v·∫•n.
     * Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ N+1.
     */
    public Map<UUID, UserPresenceResponse> getBatchPresence(List<UUID> userIds) {
        if (CollectionUtils.isEmpty(userIds)) {
            return Collections.emptyMap();
        }

        Map<UUID, UserPresenceResponse> resultMap = new HashMap<>();

        try {
            // 1. L·∫§Y TR·∫†NG TH√ÅI ONLINE (T·ª™ REDIS)
            // D√πng Pipelining ƒë·ªÉ g·ª≠i N l·ªánh SCARD (ƒë·∫øm s·ªë session) 1 l√∫c
            List<Object> pipelineSessionCounts = redisTemplate.executePipelined(
                (RedisConnection connection) -> {
                    for (UUID userId : userIds) {
                        String userSessionsKey = String.format(USER_SESSIONS_KEY, userId);
                        connection.sCard(userSessionsKey.getBytes(StandardCharsets.UTF_8));
                    }
                    return null;
                });

            // 2. L·∫§Y QUY·ªÄN RI√äNG T∆Ø & LAST ACTIVE (T·ª™ CASSANDRA)
            // 1 truy v·∫•n CSDL duy nh·∫•t
            Map<UUID, UserPresence> presenceMap = userPresenceRepository.findByUserIdIn(userIds)
                    .stream()
                    .collect(Collectors.toMap(UserPresence::getUserId, p -> p));

            // 3. T·ªîNG H·ª¢P K·∫æT QU·∫¢
            for (int i = 0; i < userIds.size(); i++) {
                UUID userId = userIds.get(i);
                long sessionCount = (Long) pipelineSessionCounts.get(i);
                boolean isOnline = (sessionCount > 0);

                UserPresence presenceData = presenceMap.get(userId);
                String status = "OFFLINE";
                Instant lastActive = (presenceData != null) ? presenceData.getLastActive() : null;

                // √Åp d·ª•ng logic Quy·ªÅn ri√™ng t∆∞
                if (presenceData != null && presenceData.isHidden()) {
                    isOnline = false; // "T·∫Øt ho·∫°t ƒë·ªông" -> lu√¥n hi·ªán OFFLINE
                }
                
                // TODO: Th√™m logic "FRIENDS_ONLY"
                // B·∫°n c·∫ßn 1 c√°ch ƒë·ªÉ check (userId, requesterId) c√≥ ph·∫£i l√† b·∫°n kh√¥ng
                
                if (isOnline) {
                    status = "ONLINE";
                    lastActive = null; // ƒêang online th√¨ kh√¥ng hi·ªÉn th·ªã lastActive
                }

                resultMap.put(userId, UserPresenceResponse.builder()
                        .userId(userId)
                        .isOnline(isOnline)
                        .status(status)
                        .lastSeen(lastActive)
                        .build());
            }

        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y batch presence (pipeline)", e);
        }
        
        return resultMap;
    }
}